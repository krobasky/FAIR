=begin comment

Prototype

Seed for discussion: can be implemented for asserting a repository is FAIR. Directories that contain lists of scored FAIR repositories can call this API on repos that implement it in order to automate some of the scoring process.

OpenAPI spec version: 0.0.2
Contact: krobasky@renci.org
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::DefaultApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::SwaggerClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::SwaggerClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# objects_get
#
# Gets some objects
# 
# @param string $keyword chosen from the manifest at random (optional)
# @param int $page_size Number of objects returned (optional)
# @param int $page_number Page number (optional)
{
    my $params = {
    'keyword' => {
        data_type => 'string',
        description => 'chosen from the manifest at random',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Number of objects returned',
        required => '0',
    },
    'page_number' => {
        data_type => 'int',
        description => 'Page number',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_get' } = { 
    	summary => 'Gets some objects',
        params => $params,
        returns => 'ARRAY[InlineResponse200]',
        };
}
# @return ARRAY[InlineResponse200]
#
sub objects_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'keyword'}) {
        $query_params->{'keyword'} = $self->{api_client}->to_query_value($args{'keyword'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # query params
    if ( exists $args{'page_number'}) {
        $query_params->{'pageNumber'} = $self->{api_client}->to_query_value($args{'page_number'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[InlineResponse200]', $response);
    return $_response_object;
}

#
# objects_objectid_get
#
# metadata for objectid
# 
# @param string $objectid a unique id for the object (required)
{
    my $params = {
    'objectid' => {
        data_type => 'string',
        description => 'a unique id for the object',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectid_get' } = { 
    	summary => 'metadata for objectid',
        params => $params,
        returns => 'FAIRObject',
        };
}
# @return FAIRObject
#
sub objects_objectid_get {
    my ($self, %args) = @_;

    # verify the required parameter 'objectid' is set
    unless (exists $args{'objectid'}) {
      croak("Missing the required parameter 'objectid' when calling objects_objectid_get");
    }

    # parse inputs
    my $_resource_path = '/objects/{objectid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'objectid'}) {
        my $_base_variable = "{" . "objectid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'objectid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('FAIRObject', $response);
    return $_response_object;
}

#
# repo_info_get
#
# FAIR repo information
# 
# @param string $scoring_engine To which FAIRness scoringEngine the response must be target (required)
{
    my $params = {
    'scoring_engine' => {
        data_type => 'string',
        description => 'To which FAIRness scoringEngine the response must be target',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'repo_info_get' } = { 
    	summary => 'FAIR repo information',
        params => $params,
        returns => 'FAIRRepo',
        };
}
# @return FAIRRepo
#
sub repo_info_get {
    my ($self, %args) = @_;

    # verify the required parameter 'scoring_engine' is set
    unless (exists $args{'scoring_engine'}) {
      croak("Missing the required parameter 'scoring_engine' when calling repo_info_get");
    }

    # parse inputs
    my $_resource_path = '/repoInfo';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'scoring_engine'}) {
        $query_params->{'scoringEngine'} = $self->{api_client}->to_query_value($args{'scoring_engine'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('FAIRRepo', $response);
    return $_response_object;
}

1;
